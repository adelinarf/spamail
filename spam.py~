

test=[["gana dinero sin hacer nada",1], ["nuevas promociones",0],["gana 100 dolares sin hacer nada al dia",1],["trabaja desde ya",0]]


def naive_bayes(message):
	vocabulary=[]
	words=[]
	for i in range(len(test)):
		w=test[i][0].split()
		words+=w
		#print (words)
	N_vocabulary=0
	for word in words:
		N_vocabulary+=1    # Size of the whole dataset
		if word not in vocabulary:
			vocabulary.append(word)
	#print (vocabulary)
	#print (N_vocabulary)
	
	words_not_spam=[]
	for i in range(len(test)):
		if test[i][1]==0:
			message=test[i][0].split()
			words_not_spam+=message
	#print (words_not_spam)
	N_not_spam=len(words_not_spam)
	
	
	words_spam=[]
	message_spam=[]
	for i in range(len(test)):
		if test[i][1]==1:
			message_spam.append(test[i][0])
			mes=test[i][0].split()
			words_spam+=mes
	#print (message_spam,words_spam)		
	
	N_spam=len(words_spam)  # Number of words in spam mails
	#print (N_spam)
	contador=0
	for i in range(len(message_spam)):
		for words in words_spam:
			if words in message_spam[i]:
					contador+=1	
	N_wi_spam=contador-N_spam  # Number of words that repeats in every spam mail
	#print (N_wi_spam)
	alpha=1
	P_spam=N_spam/N_vocabulary
	P_not_spam=N_not_spam/N_vocabulary
	
	q=classify(message,word,words_spam,words_not_spam,alpha,N_spam,N_vocabulary,N_wi_spam,P_spam,P_not_spam,N_not_spam)
	print (q)
	
	
	
def spam_(word,words_spam,alpha,N_spam,N_vocabulary,N_wi_spam,P_spam):
	if word in words_spam:
		return P_spam*(N_wi_spam+alpha)/(N_spam+(alpha*N_vocabulary))
	else:
		return 1
	
	
def not_spam_(word,words_not_spam,P_not_spam,N_wi_spam,alpha,N_vocabulary,N_not_spam):
	if word in words_not_spam:
		return P_not_spam*(N_wi_spam+alpha)/(N_not_spam+(alpha*N_vocabulary))
	else:
		return 1

def classify(message,word,words_spam,words_not_spam,alpha,N_spam,N_vocabulary,N_wi_spam,P_spam,P_not_spam,N_not_spam):
	p_spam_message=P_spam
	p_not_spam_message=P_not_spam
	for word in message:
		p_spam_message*=spam_(word,words_spam,alpha,N_spam,N_vocabulary,N_wi_spam,P_spam)
		p_not_spam_message*=not_spam_(word,words_not_spam,P_spam,N_wi_spam,alpha,N_vocabulary,N_not_spam)
	if p_not_spam_message>p_spam_message:
		return "Not spam"
	elif p_not_spam_message<p_spam_message:
		return "Spam"
	else:
		"Can't be classified"
	
	
def spam(f):
	v=f.split()
	#print (v)
	naive_bayes(v)

f=str(input("Introduce un mail:"))
spam(f)

